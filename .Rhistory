#geom_point(data = bisection_3[4, ], color = "white", size = 8) +
#geom_point(data = bisection_3[4, ], color = "red", shape = 1, size = 8) +
coord_cartesian(xlim = c(0.52, 0.72), ylim = c(0.51, 0.72)) +
labs(x = expression("Parameter " ~ alpha), #"parameter x",
y = expression("Parameter " ~ beta)
) +
theme_minimal() +
theme(legend.position = "right",
#plot.margin = margin(40, 85, 40, 85, "pt"),  # 调整坐标轴延伸长度
axis.text = element_blank(),  # 不显示坐标轴刻度标签
axis.ticks = element_blank(),  # 不显示坐标轴刻度线
panel.grid = element_blank(),  # 不显示网格线
axis.line = element_line(arrow = arrow(length = unit(0.5, "cm"))),
#axis.text.y = element_text(size = 12, family = "Arial", color = "black"),
#axis.text.x = element_text(size = 12, family = "Arial", angle = 30, hjust = 1, color = "black"),
axis.title = element_text(size = 24, face = "bold", family = "Arial")
)
ggsave("D:\\资料\\课题相关\\Mix\\plot\\overview_plot\\grid_search_bisection2.pdf", dpi = 300, units = "in")
ggsave("D:\\资料\\课题相关\\Mix\\plot\\overview_plot\\grid_search_bisection2.png", dpi = 300, units = "in")
# 绘制散点图+等高线
ggplot(grid_search_result_df2, aes(x = a, y = b)) +
geom_contour(aes(z = cor, color = after_stat(level)), binwidth = 0.2, show.legend = F) +
scale_color_viridis_c() +
#geom_path(data = sample_points, aes(group = 1, color = "gray"), linewidth = 1) +
geom_hline(yintercept = unique(sample_points$b), color = "gray") +
geom_vline(xintercept = unique(sample_points$a), color = "gray") +
geom_point(data = sample_points, color = "black", size = 3) +
geom_point(data = sample_points[which(sample_points$a == 0.61 & sample_points$b == 0.605), ], color = "red", size = 8) +
geom_point(data = sample_points[which(sample_points$a == 0.61 & sample_points$b == 0.605), ], color = "red", shape = 1, size = 8) +
geom_point(data = bisection_1, color = "#00468BFF", size = 8) +
geom_polygon(data = bisection_1, fill = NA, color = "#00468BFF", linetype = "dashed", linewidth = 3) +
geom_point(data = bisection_1[1, ], color = "red", size = 8) +
geom_point(data = bisection_1[1, ], color = "red", shape = 1, size = 8) +
geom_point(data = bisection_2, color = "#8F3931FF", size = 8) +
geom_polygon(data = bisection_2, fill = NA, color = "#8F3931FF", linetype = "dashed", linewidth = 3) +
geom_point(data = bisection_2[2, ], color = "red", size = 8) +
geom_point(data = bisection_2[2, ], color = "red", shape = 1, size = 8) +
#geom_point(data = bisection_3, color = "#42B540FF", size = 8) +
#geom_polygon(data = bisection_3, fill = NA, color = "#42B540FF", linetype = "dashed", linewidth = 4) +
#geom_point(data = bisection_3[4, ], color = "white", size = 8) +
#geom_point(data = bisection_3[4, ], color = "red", shape = 1, size = 8) +
coord_cartesian(xlim = c(0.52, 0.72), ylim = c(0.51, 0.72)) +
labs(x = expression("Parameter " ~ alpha), #"parameter x",
y = expression("Parameter " ~ beta)
) +
theme_minimal() +
theme(legend.position = "right",
#plot.margin = margin(40, 85, 40, 85, "pt"),  # 调整坐标轴延伸长度
axis.text = element_blank(),  # 不显示坐标轴刻度标签
axis.ticks = element_blank(),  # 不显示坐标轴刻度线
panel.grid = element_blank(),  # 不显示网格线
axis.line = element_line(arrow = arrow(length = unit(0.5, "cm"))),
#axis.text.y = element_text(size = 12, family = "Arial", color = "black"),
#axis.text.x = element_text(size = 12, family = "Arial", angle = 30, hjust = 1, color = "black"),
axis.title = element_text(size = 24, face = "bold", family = "Arial")
)
ggsave("D:\\资料\\课题相关\\Mix\\plot\\overview_plot\\grid_search_bisection3.pdf", dpi = 300, units = "in")
ggsave("D:\\资料\\课题相关\\Mix\\plot\\overview_plot\\grid_search_bisection3.png", dpi = 300, units = "in")
# 绘制散点图+等高线
ggplot(grid_search_result_df2, aes(x = a, y = b)) +
geom_contour(aes(z = cor, color = after_stat(level)), binwidth = 0.2, show.legend = F) +
scale_color_viridis_c() +
#geom_path(data = sample_points, aes(group = 1, color = "gray"), linewidth = 1) +
geom_hline(yintercept = unique(sample_points$b), color = "gray") +
geom_vline(xintercept = unique(sample_points$a), color = "gray") +
geom_point(data = sample_points, color = "black", size = 3) +
geom_point(data = sample_points[which(sample_points$a == 0.61 & sample_points$b == 0.605), ], color = "red", size = 8) +
geom_point(data = sample_points[which(sample_points$a == 0.61 & sample_points$b == 0.605), ], color = "red", shape = 1, size = 8) +
geom_point(data = bisection_1, color = "#00468BFF", size = 8) +
geom_polygon(data = bisection_1, fill = NA, color = "#00468BFF", linetype = "dashed", linewidth = 3) +
geom_point(data = bisection_1[1, ], color = "red", size = 8) +
geom_point(data = bisection_1[1, ], color = "red", shape = 1, size = 8) +
geom_point(data = bisection_2, color = "#8F3931FF", size = 8) +
geom_polygon(data = bisection_2, fill = NA, color = "#8F3931FF", linetype = "dashed", linewidth = 3) +
geom_point(data = bisection_2[2, ], color = "red", size = 8) +
geom_point(data = bisection_2[2, ], color = "red", shape = 1, size = 8) +
geom_point(data = bisection_3, color = "#42B540FF", size = 8) +
geom_polygon(data = bisection_3, fill = NA, color = "#42B540FF", linetype = "dashed", linewidth = 3) +
geom_point(data = bisection_3[4, ], color = "red", size = 8) +
geom_point(data = bisection_3[4, ], color = "red", shape = 1, size = 8) +
coord_cartesian(xlim = c(0.52, 0.72), ylim = c(0.51, 0.72)) +
labs(x = expression("Parameter " ~ alpha), #"parameter x",
y = expression("Parameter " ~ beta)
) +
theme_minimal() +
theme(legend.position = "right",
#plot.margin = margin(40, 85, 40, 85, "pt"),  # 调整坐标轴延伸长度
axis.text = element_blank(),  # 不显示坐标轴刻度标签
axis.ticks = element_blank(),  # 不显示坐标轴刻度线
panel.grid = element_blank(),  # 不显示网格线
axis.line = element_line(arrow = arrow(length = unit(0.5, "cm"))),
#axis.text.y = element_text(size = 12, family = "Arial", color = "black"),
#axis.text.x = element_text(size = 12, family = "Arial", angle = 30, hjust = 1, color = "black"),
axis.title = element_text(size = 24, face = "bold", family = "Arial")
)
ggsave("D:\\资料\\课题相关\\Mix\\plot\\overview_plot\\grid_search_bisection4.png", dpi = 300, units = "in")
ggsave("D:\\资料\\课题相关\\Mix\\plot\\overview_plot\\grid_search_bisection4.pdf", dpi = 300, units = "in")
#| include: false
library(tidyverse)
library(rstan)
library(bayesplot)
knitr::opts_chunk$set(
fig.align = "center"
)
set.seed(20241206)
ggplot2::theme_set(ggplot2::theme_bw())
## read data
#setwd("D:/TempWork/homework/20241205")
dt <- readRDS("parkingSSdata.rds") |> as_tibble()
summary(dt)
# Summary statistics for commute distance (cdist)
summary(dt$cdist)
# Histogram of commute distances
ggplot(dt, aes(x = cdist)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
labs(title = "Histogram of Commute Distances",
x = "Commute Distance (miles)", y = "Frequency") +
theme_minimal()
# Frequency table for parking permit type (ptype)
dt %>%
count(ptype) %>%
mutate(percentage = n / sum(n) * 100) %>%
rename(`Permit Type` = ptype, Count = n, Percentage = percentage)
# Bar plot of average commute days (tdrive) for each weekday
dt %>%
group_by(day) %>%
summarise(avg_drive = mean(tdrive)) %>%
ggplot(aes(x = day, y = avg_drive, fill = day)) +
geom_bar(stat = "identity") +
labs(title = "Average Commute Days by Weekday",
x = "Day of the Week", y = "Average Commute Days") +
theme_minimal() +
theme(legend.position = "none")
# Scatterplot of tdrive vs. cdist
ggplot(dt, aes(x = cdist, y = tdrive)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "Scatterplot of Commute Days vs. Distance",
x = "Commute Distance (miles)", y = "Commute Days") +
theme_minimal()
# ANOVA: Commute days across parking permit types
anova_model <- aov(tdrive ~ as.factor(ptype), data = dt)
summary(anova_model)
# Pairwise t-tests: Comparing commute frequency across weekdays
pairwise.t.test(dt$tdrive, dt$day, p.adjust.method = "bonferroni")
# Prepare data for Bayesian modeling
data_stan <- dt %>%
mutate(day = as.integer(factor(day)),  # Convert day to integer for Stan
id = as.integer(factor(id)),
ptype = as.integer(as.factor(ptype)))  # Convert ptype to integer
# Define the Stan model as a string
stan_code <- "
data {
int<lower=1> N;             // Number of observations
int<lower=1> J;             // Number of employees
int<lower=1> K_day;         // Number of weekdays
int<lower=1> L_ptype;       // Number of parking types
int<lower=1, upper=J> id[N]; // Employee ID
int<lower=1, upper=K_day> day[N]; // Day of the week
int<lower=1, upper=L_ptype> ptype[N]; // Parking type
real cdist[N];              // Commute distance
real tdrive[N];             // Commute days
}
parameters {
real alpha;                 // Global intercept
real beta_cdist;            // Slope for commute distance
vector[K_day] beta_day;     // Day of week effects
vector[L_ptype] beta_ptype; // Parking type effects
vector[J] u;                // Random intercepts for employees
real<lower=0> sigma;        // Residual standard deviation
real<lower=0> sigma_u;      // Standard deviation of random effects
}
model {
// Simplified model without random effects or day-specific effects
for (n in 1:N) {
tdrive[n] ~ normal(alpha + beta_cdist * cdist[n], sigma);
}
}
"
# Prepare data for Stan
stan_data <- list(
N = nrow(data_stan),
J = length(unique(data_stan$id)),
K_day = length(unique(data_stan$day)),
L_ptype = length(unique(data_stan$ptype)),
id = data_stan$id,
day = data_stan$day,
ptype = data_stan$ptype,
cdist = data_stan$cdist,
tdrive = data_stan$tdrive
)
# Compile and fit the model
fit <- stan(
model_code = stan_code,  # Use the string-defined model
data = stan_data,
iter = 2000,
chains = 4,
cores = 4,
seed = 123
)
# Compile and fit the model
fit <- stan(
model_code = stan_code,  # Use the string-defined model
data = stan_data,
iter = 100,
chains = 4,
cores = 4,
seed = 123
)
# Prepare data for Bayesian modeling
data_stan <- dt %>%
mutate(day = as.integer(factor(day)),  # Convert day to integer for Stan
id = as.integer(factor(id)),
ptype = as.integer(as.factor(ptype)))  # Convert ptype to integer
# Define the Stan model as a string
stan_code <- "
data {
int<lower=1> N;             // Number of observations
int<lower=1> J;             // Number of employees
int<lower=1> K_day;         // Number of weekdays
int<lower=1> L_ptype;       // Number of parking types
int<lower=1, upper=J> id[N]; // Employee ID
int<lower=1, upper=K_day> day[N]; // Day of the week
int<lower=1, upper=L_ptype> ptype[N]; // Parking type
real cdist[N];              // Commute distance
real tdrive[N];             // Commute days
}
parameters {
real alpha;                 // Global intercept
real beta_cdist;            // Slope for commute distance
vector[K_day] beta_day;     // Day of week effects
vector[L_ptype] beta_ptype; // Parking type effects
vector[J] u;                // Random intercepts for employees
real<lower=0> sigma;        // Residual standard deviation
real<lower=0> sigma_u;      // Standard deviation of random effects
}
model {
// Simplified model without random effects or day-specific effects
for (n in 1:N) {
tdrive[n] ~ normal(alpha + beta_cdist * cdist[n], sigma);
}
}
"
# Prepare data for Stan
stan_data <- list(
N = nrow(data_stan),
J = length(unique(data_stan$id)),
K_day = length(unique(data_stan$day)),
L_ptype = length(unique(data_stan$ptype)),
id = data_stan$id,
day = data_stan$day,
ptype = data_stan$ptype,
cdist = data_stan$cdist,
tdrive = data_stan$tdrive
)
# Compile and fit the model
fit <- stan(
model_code = stan_code,  # Use the string-defined model
data = stan_data,
iter = 100,
chains = 4,
cores = 4,
seed = 123
)
# Print summary of results
print(fit, pars = c("alpha", "beta_cdist", "beta_day", "beta_ptype", "sigma", "sigma_u"))
# Plot posterior distributions
stan_plot(fit, pars = c("alpha", "beta_cdist", "sigma", "sigma_u"))
# Diagnostics: Trace plots
stan_trace(fit, pars = c("alpha", "beta_cdist", "sigma", "sigma_u"))
# Posterior predictive checks
posterior_samples <- as.matrix(fit)
y_rep <- posterior_samples[, grepl("^tdrive\\[", colnames(posterior_samples))]
ppc_dens_overlay(y = data_stan$tdrive, yrep = y_rep)
data_stan
y_rep
ppc_dens_overlay(y = data_stan$tdrive, yrep = y_rep)
# Posterior predictive checks
posterior_samples <- as.matrix(fit)
y_rep <- posterior_samples[, grepl("^tdrive\\[", colnames(posterior_samples))]
y_rep
posterior_samples
posterior_samples[1:10,1:10]
posterior_samples[1,]
summary(fit)
mcmc_areas(as.matrix(fit), pars = c("alpha", "beta_cdist", "beta_day[1]", "beta_ptype[1]"))
print(fit, pars = c("alpha", "beta_cdist"), probs = c(0.025, 0.5, 0.975))
y_rep <- posterior_predict(fit)
library(brms)
pak::pak("brms")
install.packages("brms")
library(brms)
y_rep <- posterior_predict(fit)
?posterior_predict
y_rep <- rstantools::posterior_predict(fit)
y_rep <- brms::posterior_predict(fit)
# Get the posterior samples for the parameters
alpha <- posterior_samples$alpha
# Posterior predictive checks
posterior_samples <- as.matrix(fit)
# Get the posterior samples for the parameters
alpha <- posterior_samples$alpha
fit_brms <- brm(
tdrive ~ cdist + (1 | id) + (1 | day) + (1 | ptype),
data = data_stan,
family = gaussian(),
iter = 2000,
chains = 4
)
fit_brms <- brm(
tdrive ~ cdist + (1 | id) + (1 | day) + (1 | ptype),
data = data_stan,
family = gaussian(),
iter = 100,
chains = 4
)
# Posterior predictive samples using brms
y_rep_brms <- posterior_predict(fit_brms)
# Check how well the model fits the data
ppc_dens_overlay(data_stan$tdrive, y_rep_brms[1:100, ])
# Print summary of results
print(fit_brms, pars = c("alpha", "beta_cdist", "beta_day", "beta_ptype", "sigma", "sigma_u"))
# Plot posterior distributions
stan_plot(fit_brms, pars = c("alpha", "beta_cdist", "sigma", "sigma_u"))
# Diagnostics: Trace plots
stan_trace(fit_brms, pars = c("alpha", "beta_cdist", "sigma", "sigma_u"))
# Posterior predictive samples using brms
y_rep_brms <- posterior_predict(fit_brms)
# Check how well the model fits the data
ppc_dens_overlay(data_stan$tdrive, y_rep_brms[1:100, ])
y_rep_brms
# Print summary of results
summary(fit_brms)
posterior_interval(fit_brms, prob = 0.95)
posterior_intervals <- posterior_interval(fit_brms, prob = 0.95)  # 95% credible interval
print(posterior_intervals)
# Extract posterior samples of specific parameters
posterior_samples <- posterior_samples(fit_brms)
# For example, analyze the parameter `beta_cdist`
beta_cdist_samples <- posterior_samples$cdist
# Compute summary statistics
mean_beta_cdist <- mean(beta_cdist_samples)
ci_beta_cdist <- quantile(beta_cdist_samples, c(0.025, 0.975))  # 95% credible interval
sd_beta_cdist <- sd(beta_cdist_samples)
# Print results
cat("Mean of beta_cdist:", mean_beta_cdist, "\n")
cat("95% Credible Interval of beta_cdist:", ci_beta_cdist, "\n")
cat("Standard deviation of beta_cdist:", sd_beta_cdist, "\n")
#| include: false
#| warning: false
library(tidyverse)
library(rstan)
library(brms)
library(bayesplot)
knitr::opts_chunk$set(
fig.align = "center"
)
set.seed(20241206)
ggplot2::theme_set(ggplot2::theme_bw())
summary(fit_brms)$fixed
#| include: false
#| warning: false
library(tidyverse)
library(rstan)
library(brms)
knitr::opts_chunk$set(
fig.align = "center"
)
set.seed(20241206)
ggplot2::theme_set(ggplot2::theme_bw())
summary(fit_brms)$fixed
summary(fit_brms)$fixed
summary(fit_brms)$random
pp_check(fit_brms)
summary(fit_brms)$fixed
summary(fit_brms)$random
pp_check(fit_brms)
fit_brms <- brm(
tdrive ~ cdist * day + ptype + (1 | id) + (1 | day) + (1 | ptype),
data = data_stan,
family = gaussian(),
iter = 2000,         # Increase iterations for better convergence
chains = 4,          # Use multiple chains
control = list(adapt_delta = 0.95)  # Increase adapt_delta for better sampling
)
# Print summary of results
summary(fit_brms)
# Posterior predictive samples using brms
y_rep_brms <- posterior_predict(fit_brms)
# Check how well the model fits the data
ppc_dens_overlay(data_stan$tdrive, y_rep_brms[1:100, ])
# Extract posterior samples of specific parameters
posterior_samples <- posterior_samples(fit_brms)
# Analyze the parameter `beta_cdist`
beta_cdist_samples <- posterior_samples$cdist
# Compute summary statistics
mean_beta_cdist <- mean(beta_cdist_samples)
ci_beta_cdist <- quantile(beta_cdist_samples, c(0.025, 0.975))  # 95% credible interval
sd_beta_cdist <- sd(beta_cdist_samples)
posterior_samples
# Extract posterior samples of specific parameters
posterior_samples <- posterior_samples(fit_brms)
?as_draws
beta_cdist_samples <- as_draws(fit_brms)
# Compute summary statistics
mean_beta_cdist <- mean(beta_cdist_samples)
beta_cdist_samples <- as_draws(fit_brms)$cdist
beta_cdist_samples <- posterior::summarize_draws(as_draws_array(fit_brms)))
beta_cdist_samples <- posterior::summarize_draws(as_draws_array(fit_brms))
View(beta_cdist_samples)
beta_cdist_samples[1:10,1:10]
beta_cdist_samples
beta_cdist_samples
#| include: false
#| warning: false
library(tidyverse)
library(rstan)
library(brms)
library(bayesplot)
knitr::opts_chunk$set(
fig.align = "center"
)
set.seed(20241206)
ggplot2::theme_set(ggplot2::theme_bw())
# Print results
cat("Mean of beta_cdist:", beta_cdist_samples$mean[beta_cdist_samples$variable == "b_cdist"], "\n")
beta_cdist_samples$q5[beta_cdist_samples$variable == "b_cdist"]
cat("95% Credible Interval of beta_cdist:", paste(beta_cdist_samples$q5[beta_cdist_samples$variable == "b_cdist"],      ... = beta_cdist_samples$q95[beta_cdist_samples$variable == "b_cdist"], sep = ","), "\n")
cat("95% Credible Interval of beta_cdist:", paste(beta_cdist_samples$q5[beta_cdist_samples$variable == "b_cdist"],      ... = beta_cdist_samples$q95[beta_cdist_samples$variable == "b_cdist"], sep = "to"), "\n")
cat("95% Credible Interval of beta_cdist:", paste(beta_cdist_samples$q5[beta_cdist_samples$variable == "b_cdist"],      ... = beta_cdist_samples$q95[beta_cdist_samples$variable == "b_cdist"], sep = " to "), "\n")
cat("Standard deviation of beta_cdist:", beta_cdist_samples$sd[beta_cdist_samples$variable == "b_cdist"], "\n")
summary(fit_brms)$fixed
summary(fit_brms)$random
pp_check(fit_brms)
plot(fit_brms, pars = "^b_") +
ggtitle("Fixed Effects with Credible Intervals") +
xlab("Estimate") +
ylab("Parameters")
ranef_plot <- as_draws_df(fit_brms)
mcmc_areas(ranef_plot, prob = 0.90) +
ggtitle("Random Effects Variability") +
xlab("Estimate") +
ylab("Density")
pp_check(fit_brms) +
ggtitle("Posterior Predictive Check") +
xlab("Observed Commute Days") +
ylab("Predicted Density")
saveRDS(fit_brms, "fit_brms.rds")
getwd()
cat("Mean of beta_cdist:", beta_cdist_samples$mean[beta_cdist_samples$variable == "b_cdist"], "\n")
cat("90% Credible Interval of beta_cdist:", paste(beta_cdist_samples$q5[beta_cdist_samples$variable == "b_cdist"],      ... = beta_cdist_samples$q95[beta_cdist_samples$variable == "b_cdist"], sep = " to "), "\n")
cat("Standard deviation of beta_cdist:", beta_cdist_samples$sd[beta_cdist_samples$variable == "b_cdist"], "\n")
dt
# Check how well the model fits the data
ppc_dens_overlay(data_brms$tdrive, y_rep_brms[1:100, ])
# Prepare data for Bayesian modeling
data_brms <- dt %>%
mutate(day = as.integer(factor(day)),  # Convert day to integer for Stan
id = as.integer(factor(id)),
ptype = as.integer(as.factor(ptype)))  # Convert ptype to integer
# Check how well the model fits the data
ppc_dens_overlay(data_brms$tdrive, y_rep_brms[1:100, ])
install.packages(c("BH", "bit", "cpp11", "data.table", "lmodel2", "openssl", "parallelly", "pillar", "RcppArmadillo", "RSQLite", "shiny", "textshaping"))
install.packages(c("bit", "cluster", "curl", "data.table", "fontawesome", "fs", "httr2", "knitr", "lubridate", "openssl", "pillar", "Rcpp", "rmarkdown", "shiny", "survival", "testthat", "textshaping", "tinytex", "usethis", "waldo", "xfun"), lib="C:/Program Files/R/R-4.4.1/library")
install.packages(c("bit64", "bslib", "cli", "curl", "data.table", "httr2", "jsonlite", "locfit", "Matrix", "multcomp", "nlme", "openssl", "openxlsx", "pak", "parallelly", "pkgbuild", "processx", "ps", "purrr", "quantreg", "QuickJSR", "R6", "RcppArmadillo", "RcppParallel", "renv", "rlang", "sessioninfo", "sommer", "systemfonts", "textshaping", "TH.data", "tinytex", "xfun", "zip", "zoo"))
pak::pak(c("bit64", "bslib", "cli", "curl", "data.table", "httr2", "jsonlite", "locfit", "Matrix", "multcomp", "nlme", "openssl", "openxlsx", "pak", "parallelly", "pkgbuild", "processx", "ps", "purrr", "quantreg", "QuickJSR", "R6", "RcppArmadillo", "RcppParallel", "renv", "rlang", "sessioninfo", "sommer", "systemfonts", "textshaping", "TH.data", "tinytex", "xfun", "zip", "zoo"))
pak::pak("ellmer", repos = "https://tidyverse.r-universe.dev")
pak::pkg_install("ellmer", repos = "https://tidyverse.r-universe.dev")
install.packages("ellmer", repos = "https://tidyverse.r-universe.dev")
pak::pak(c("coro", "s7")
)
pak::pak(c("coro", "S7"))
install.packages("ellmer", repos = "https://tidyverse.r-universe.dev")
library(ellmer)
pak::pak("httr2")
install.packages(c("bit", "cluster", "commonmark", "cpp11", "httr2", "jpeg", "jsonlite", "knitr", "locfit", "markdown", "MASS", "Matrix", "mime", "nlme", "nloptr", "posterior", "quantreg", "QuickJSR", "R.utils", "RcppArmadillo", "RcppTOML", "Rdpack", "readxl", "renv", "reticulate", "rstan", "tinytex", "tzdb", "writexl", "xml2"))
install.packages(c("cluster", "httr2", "MASS", "Matrix"), lib="C:/Program Files/R/R-4.4.2/library")
install.packages(c("bit", "cluster", "commonmark", "cpp11", "httr2", "jpeg", "jsonlite", "knitr", "locfit", "markdown", "MASS", "Matrix", "mime", "nlme", "nloptr", "posterior", "quantreg", "QuickJSR", "R.utils", "RcppArmadillo", "RcppTOML", "Rdpack", "readxl", "renv", "reticulate", "rstan", "tinytex", "tzdb", "writexl", "xml2"))
install.packages(c("bayesplot", "BGLR", "broom", "cluster", "curl", "doBy", "foreign", "fs", "future", "gert", "ggplot2", "globals", "httpuv", "httr2", "jsonlite", "later", "lattice", "litedown", "lme4", "MASS", "Matrix", "MatrixModels", "mgcv", "nlme", "pak", "pillar", "ps", "QuickJSR", "ragg", "RcppArmadillo", "Rdpack", "rlang", "sass", "sommer", "stringi", "systemfonts", "tinytex", "writexl", "xfun", "zoo"))
install.packages(c("lattice", "mgcv"), lib="C:/Program Files/R/R-4.5.0/library")
pak::pak(c("bayesplot", "BGLR", "broom", "cluster", "curl", "doBy", "foreign", "fs", "future", "gert", "ggplot2", "globals", "httpuv", "httr2", "jsonlite", "later", "lattice", "litedown", "lme4", "MASS", "Matrix", "MatrixModels", "mgcv", "nlme", "pak", "pillar", "ps", "QuickJSR", "ragg", "RcppArmadillo", "Rdpack", "rlang", "sass", "sommer", "stringi", "systemfonts", "tinytex", "writexl", "xfun", "zoo"))
system("make")
system("where")
system("make")
pak::pak(c("bayesplot", "BGLR", "broom", "cluster", "curl", "doBy", "foreign", "fs", "future", "gert", "ggplot2", "globals", "httpuv", "httr2", "jsonlite", "later", "lattice", "litedown", "lme4", "MASS", "Matrix", "MatrixModels", "mgcv", "nlme", "pak", "pillar", "ps", "QuickJSR", "ragg", "RcppArmadillo", "Rdpack", "rlang", "sass", "sommer", "stringi", "systemfonts", "tinytex", "writexl", "xfun", "zoo"))
.libPaths()
.libPaths()
pak::pak(c("bayesplot", "BGLR", "broom", "cluster", "curl", "doBy", "foreign", "fs", "future", "gert", "ggplot2", "globals", "httpuv", "httr2", "jsonlite", "later", "lattice", "litedown", "lme4", "MASS", "Matrix", "MatrixModels", "mgcv", "nlme", "pak", "pillar", "ps", "QuickJSR", "ragg", "RcppArmadillo", "Rdpack", "rlang", "sass", "sommer", "stringi", "systemfonts", "tinytex", "writexl", "xfun", "zoo"))
install.packages(c("cluster", "foreign", "lattice", "MASS", "Matrix", "mgcv", "nlme"))
pak::pak(c("cluster", "foreign", "lattice", "MASS", "Matrix", "mgcv", "nlme"))
install.packages(c("cluster", "foreign", "lattice", "MASS", "Matrix", "mgcv", "nlme"))
install.packages(c("cluster", "foreign", "lattice", "MASS", "Matrix", "mgcv", "nlme"))
pak::system_r_platform()
pak::pkg_system_requirements()
update.packages(ask = F)
setwd("D:\\资料\\课题相关\\add_dom\\Scripts and results")
load("data/data_add_dom.rdata")
rm(TT2)
rm(geno)
save.image("D:\\资料\\课题相关\\add_dom\\Scripts and results\\a.rdata")
rm(list=ls())
load("a.rdata")
GA=GG
rm(GG)
rm(list=ls())
load("data/data_add_dom.rdata")
load("data/data_add_dom.rdata")
rm(TT3)
rm(geno)
TA=TT2
rm(TT2)
save.image("D:\\资料\\课题相关\\add_dom\\Scripts and results\\a.rdata")
